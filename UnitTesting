package main

import (
	"testing"
)

func setup() *App {
	app := &App{}
	app.Initialize("sqlite3", ":memory:")
	return app
}

func teardown(app *App) {
	app.DB.Close()
}


func TestCreateHandler(t *testing.T) {
	app := setup()
	testStar := &movies{
		ID:          1,
		Name:        "test/name",
		Description: "test desc",
		Genre:       "test genre",
	}

	data := url.Values{
		"name":        {testmovies.Name},
		"description": {testmovies.Description},
		"Genre":       {testmovies.URL},
	}

	form := strings.NewReader(data.Encode())

	req, err := http.NewRequest("POST", "/movies", form)
	if err != nil {
		t.Fatal(err)
	}

	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

	rr := httptest.NewRecorder()

	if status := rr.Code; status != http.StatusCreated {
		t.Errorf("Status code is invalid. Expected %d. Got %d instead", http.StatusCreated, status)
	}
	expectedURL := fmt.Sprintf("/movies/%s", testMovie.Name)
	if location := rr.Header().Get("Location"); location != expectedURL {
		t.Errorf("Location header is invalid. Expected %s. Got %s instead", expectedURL, location)
	}
	createdMovies := Movies{}
	app.DB.First(&createdMovie)
	if createdMovie != *testMovie {
		t.Errorf("Created star is invalid. Expected %+v. Got %+v instead", testMovie, createdMovie)
	}

	http.HandlerFunc(app.CreateHandler).ServeHTTP(rr, req)
	teardown(app)
}

