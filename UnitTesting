package main

import (
	"testing"
	"github.com/gorilla/mux"
	"encoding/json"
	"io/ioutil"

)

func setup() *App {

	app := &App{}
	app.Initialize("sqlite3", ":memory:")
	return app
}

func teardown(app *App) {
	app.DB.Close()
}

func TestCreateHandler(t *testing.T) {
	app := setup()
	testStar := &Movies{
		ID:          1,
		Name:        "test/name",
		Description: "test desc",
		Genre:         "test genre",
		Review:"test review",
	}
	data := url.Values{
		"name":        {testMovies.Name},
		"description": {testMovies.Description},
		"genre":         {testMovies.Genre},
		"review":{testMovies.Review}
	}
	form := strings.NewReader(data.Encode())
	req, err := http.NewRequest("POST", "/movies", MoviesFormValues(*testMovies))
	if err != nil {
		t.Fatal(err)
	}
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	rr := httptest.NewRecorder()
	http.HandlerFunc(app.CreateHandler).ServeHTTP(rr, req)
	if status := rr.Code; status != http.StatusCreated {
		t.Errorf("Status code is invalid. Expected %d. Got %d instead", http.StatusCreated, status)
	}
	expectedURL := fmt.Sprintf("/movies/%s", testMovies.Name)
	if location := rr.Header().Get("Location"); location != expectedURL {
		t.Errorf("Location header is invalid. Expected %s. Got %s instead", expectedURL, location)
	}
	createdMovies := Movies{}
	app.DB.First(&createdMovies)
	if createdMovies != *testMovies {
		t.Errorf("Created star is invalid. Expected %+v. Got %+v instead", testMovies, createdMovies)
	}
	teardown(app)
}
func MoviesFormValues(movies Movies) *strings.Reader {
	
	data := url.Values{
		"name":        {movies.Name},
		"description": {movies.Description},
		"genre":         {movies.Genre},
		"review":{movies.Review},
	}

	return strings.NewReader(data.Encode())
}
func TestUpdateHandler(t *testing.T) {
	app := setup()

	
	testMovies := &Movies{
		ID:          1,
		Name:        "test/movies",
		Description: "test desc",
		Genre:         "test genre",
		Review:"test review",
	}
	moviesTests := []struct {
		original Movies
		update   Movies
	}{
		{original: *testMovies,
			update: Movies{ID: 1, Name: "test/name", Description: "updated desc", Genre: "test genre", Review:"test review"},
		},
		{original: Movies{ID: 1, Name: "test/name", Description: "updated desc", Genre: "test genre", Review:"test review"},
			update: Movies{ID: 1, Name: "updated name", Description: "updated desc", Genre: "test genre", Review:"test review"},
		},
	}

	for _, tt := range moviesTests {
		req, err := http.NewRequest("PUT", fmt.Sprintf("/movies/%s", tt.original.Name), MoviesFormValues(tt.update))
		if err != nil {
			t.Fatal(err)
		}
		
		req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

		rr := httptest.NewRecorder()
		
		r := mux.NewRouter()

		r.HandleFunc("/movies/{name:.*}", app.UpdateHandler).Methods("PUT")
		r.ServeHTTP(rr, req)
		if status := rr.Code; status != http.StatusNoContent {
			t.Errorf("Status code is invalid. Expected %d. Got %d instead", http.StatusNoContent, status)
		}

		
		updatedMovies := Movies{}
		app.DB.First(&updatedMovies)
		if updatedMovies != tt.update {
			t.Errorf("Updated star is invalid. Expected %+v. Got %+v instead", tt.update, updatedMovies)
		}
	}

	
	app.DB.Create(testMovies)
	teardown(app)
}





func TestViewHandler(t *testing.T) {
	app := setup()
	moviesTests := []Movies{
		Movies{ID: 1, Name: "test/name", Description: "test desc", URL: "test URL"},
		Movies{ID: 2, Name: "test/another_name", Description: "test desc 2", URL: "http://example.com/"},
	}

	for _, star := range starTests {
		
		app.DB.Create(star)

		
		req, err := http.NewRequest("GET", fmt.Sprintf("/stars/%s", star.Name), nil)
		if err != nil {
			t.Fatal(err)
		}

		rr := httptest.NewRecorder()
		
		r := mux.NewRouter()

		r.HandleFunc("/stars/{name:.*}", app.ViewHandler).Methods("GET")
		r.ServeHTTP(rr, req)

		
		if status := rr.Code; status != http.StatusOK {
			t.Errorf("Status code is invalid. Expected %d. Got %d instead", http.StatusOK, status)
		}
